<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
	This config file defines snippets for CQL queries.

	The <preamble> must contain information about FHIR libraries and a variable {0} where the context (Specimen, Patient) will be inserted as well as a variable {1] where codesystems are inserted.
    For fields (depending on entity type) which need a singleton statement the variable {2} definie the place where all singleton statements are inserted.
    Variable binding:
        {0}     context (Specimen, Patient)
        {1}     codesystem definitions
        {2}     singleton statements

	The <pathCqlExpression> represents the path starting at the resource corresponding to the context ending with the field in the FHIR resource corresponding to the UI field.
    Variable binding:
	    {0}     atomic expressions will be inserted here.

	Every atomic expression <atomicExpression> represents one condition for a field given by an operator and one or two values.
	It will be choosen dependent on the <operator>. If no operator-specific snippet is provided the connector will use the snippet
	defined for <operator>DEFAULT</operator>.
	Variable binding:
	    {0}     operator
	    {1}     url of an extension (if present)
	    {2}     the first value
	    {3}     the second value (max. value)

	IMPORTANT:
		A single apostrophe ' must be escaped by a double apostrophe ''
		Additionally characters such as > < ... must be encoded as &lt; &gt; ... according to XML (see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references)
-->
<cqlConfig>
    <preamble>library Retrieve
using FHIR version ''4.0.0''
include FHIRHelpers version ''4.0.0''

{1}

context {0}

{2}

define InInitialPopulation:
    </preamble>

    <!-- Sample type liquid -->
    <uiField>
        <mdrUrn>urn:mdr16:dataelement:16:1</mdrUrn>
        <codesystem>
            <name>SampleMaterialType</name>
            <url>https://fhir.bbmri.de/CodeSystem/SampleMaterialType</url>
        </codesystem>
        <extensionUrl/>
        <entityType>
            <entityTypeName>Patient</entityTypeName>
            <pathCqlExpression>
    exists(
    from [Specimen] S where {0})
            </pathCqlExpression>
            <atomicExpression>
                <operator>DEFAULT</operator>
                <atomicCqlExpression>S.value.coding contains Code ''{2}'' from SampleMaterialType</atomicCqlExpression>
            </atomicExpression>
        </entityType>
        <entityType>
            <entityTypeName>Specimen</entityTypeName>
            <pathCqlExpression>{0}</pathCqlExpression>
            <atomicExpression>
                <operator>DEFAULT</operator>
                <atomicCqlExpression>Specimen.value.coding contains Code ''{2}'' from SampleMaterialType</atomicCqlExpression>
            </atomicExpression>
        </entityType>
    </uiField>

    <!-- Storage temperature -->
    <uiField>
        <mdrUrn>urn:mdr16:dataelement:17:1</mdrUrn>
        <codesystemName>StorageTemperature</codesystemName>
        <codesystem>
            <name>StorageTemperature</name>
            <url>https://fhir.bbmri.de/CodeSystem/StorageTemperature</url>
        </codesystem>
        <extensionUrl>https://fhir.bbmri.de/StructureDefinition/StorageTemperature</extensionUrl>
        <entityType>
            <entityTypeName>Patient</entityTypeName>
            <pathCqlExpression>
    exists(
    from [Specimen] S where {0})
            </pathCqlExpression>
            <atomicExpression>
                <operator>DEFAULT</operator>
                <atomicCqlExpression>
    exists(
    from S.extension E
    where E.url = ''{1}''
    and E.value.coding contains Code ''{2}'' from StorageTemperature)
                </atomicCqlExpression>
            </atomicExpression>
        </entityType>
        <entityType>
            <entityTypeName>Specimen</entityTypeName>
            <pathCqlExpression>{0}</pathCqlExpression>
            <atomicExpression>
                <operator>DEFAULT</operator>
                <atomicCqlExpression>
    exists(
    from Specimen.extension E
    where E.url = ''{1}''
    and E.value.coding contains Code ''{2}'' from StorageTemperature)
                </atomicCqlExpression>
            </atomicExpression>
        </entityType>
        <permittedValue>
            <!-- Plasma-Lithium-Heparin -->
            <mdrKey>plasma-lithium-heparin</mdrKey>
            <cqlValue>temperatureOther</cqlValue>
        </permittedValue>
        <permittedValue>
            <!-- Room temperature -->
            <mdrKey>RT</mdrKey>
            <cqlValue>temperatureRoom</cqlValue>
        </permittedValue>
        <permittedValue>
            <!-- 2°C bis 10°C -->
            <mdrKey>two_to_ten_degrees</mdrKey>
            <cqlValue>temperature2to10</cqlValue>
        </permittedValue>
        <permittedValue>
            <!-- 4°C -->
            <mdrKey>four_degrees</mdrKey>
            <cqlValue>temperatureOther</cqlValue>
        </permittedValue>
        <permittedValue>
            <!-- Minus 18°C to minus 35°C -->
            <mdrKey>minus_eighteen_to_minus_thirty-five_degrees</mdrKey>
            <cqlValue>temperature-18to-35</cqlValue>
        </permittedValue>
        <permittedValue>
            <!-- Minus 60°C to minus 85°C -->
            <mdrKey>minus_sixty_to_minus_eighty_five_degrees</mdrKey>
            <cqlValue>temperature-60to-85</cqlValue>
        </permittedValue>
        <permittedValue>
            <!-- Liquid nitrogen -->
            <mdrKey>gaseous_nitrogen</mdrKey>
            <cqlValue>temperatureGN</cqlValue>
        </permittedValue>
        <permittedValue>
            <!-- Liquid nitrogen -->
            <mdrKey>liquid_nitrogene</mdrKey>
            <cqlValue>temperatureLN</cqlValue>
        </permittedValue>
        <permittedValue>
            <!-- Other storage temperature -->
            <mdrKey>storage_temperature_other</mdrKey>
            <cqlValue>temperatureOther</cqlValue>
        </permittedValue>
        <permittedValue>
            <!-- Uncharted storage temperature -->
            <mdrKey>storage_temperature_uncharted</mdrKey>
            <cqlValue>temperatureOther</cqlValue>
        </permittedValue>
    </uiField>

    <!-- Sex -->
    <uiField>
        <mdrUrn>urn:mdr16:dataelement:23:1</mdrUrn>
        <codesystems/>
        <extensionUrl/>
        <entityType>
            <entityTypeName>Patient</entityTypeName>
            <pathCqlExpression>{0}</pathCqlExpression>
            <atomicExpression>
                <operator>DEFAULT</operator>
                <atomicCqlExpression>Patient.gender {0} ''{2}''</atomicCqlExpression>
            </atomicExpression>
            <atomicExpression>
                <operator>...</operator>
                <atomicCqlExpression>(Patient.gender &lt; ''{3}'' and Patient.gender &gt; ''{2}'')</atomicCqlExpression>
            </atomicExpression>
        </entityType>
        <entityType>
            <entityTypeName>Specimen</entityTypeName>
            <pathCqlExpression>
    exists(from [Patient] P where {0})
            </pathCqlExpression>
            <atomicExpression>
                <operator>DEFAULT</operator>
                <atomicCqlExpression>P.gender {0} ''{2}''</atomicCqlExpression>
            </atomicExpression>
            <atomicExpression>
                <operator>...</operator>
                <atomicCqlExpression>(P.gender &lt; ''{3}'' and P.gender &gt; ''{2}'')</atomicCqlExpression>
            </atomicExpression>
        </entityType>
    </uiField>

    <!-- BMI -->
    <uiField>
        <mdrUrn>urn:mdr16:dataelement:31:1</mdrUrn>
        <codesystem>
            <name>loinc</name>
            <url>http://loinc.org</url>
        </codesystem>
        <extensionUrl/>
        <entityType>
            <entityTypeName>Patient</entityTypeName>
            <pathCqlExpression>
    exists(
    from [Observation: Code ''39156-5'' from loinc] O
    where {0})
            </pathCqlExpression>
            <atomicExpression>
                <operator>DEFAULT</operator>
                <atomicCqlExpression>(O.value as Quantity) {0} {1} ''kg/m2''</atomicCqlExpression>
            </atomicExpression>
            <atomicExpression>
                <operator>...</operator>
                <atomicCqlExpression>((O.value as Quantity) &lt; {3} ''kg/m2'') and (O.value as Quantity) &gt; {2} ''kg/m2'')</atomicCqlExpression>
            </atomicExpression>
        </entityType>
        <entityType>
            <entityTypeName>Specimen</entityTypeName>
            <singleton>
                <name>Patient</name>
            </singleton>
            <pathCqlExpression>
    exists(
    from [Patient -&gt; Observation: Code ''39156-5'' from loinc] O
    where {0})
            </pathCqlExpression>
            <atomicExpression>
                <operator>DEFAULT</operator>
                <atomicCqlExpression>(O.value as Quantity) {0} {1} ''kg/m2''</atomicCqlExpression>
            </atomicExpression>
            <atomicExpression>
                <operator>...</operator>
                <atomicCqlExpression>((O.value as Quantity) &lt; {3} ''kg/m2'') and (O.value as Quantity) &gt; {2} ''kg/m2'')</atomicCqlExpression>
            </atomicExpression>
        </entityType>
    </uiField>

    <!-- Artifical MDR field / two codesystems -->
    <uiField>
        <mdrUrn>urn:mdr16:dataelement:08:15</mdrUrn>
        <codesystem>
            <name>loinc</name>
            <url>http://loinc.org</url>
        </codesystem>
        <codesystem>
            <name>loinc2</name>
            <url>http://loinc2.org</url>
        </codesystem>
    </uiField>

    <!-- Artifical MDR field / with singleton 'Patient' -->
    <uiField>
        <mdrUrn>urn:mdr16:dataelement:08:16</mdrUrn>
        <codesystem/>
        <entityType>
            <entityTypeName>Patient</entityTypeName>
        </entityType>
        <entityType>
            <entityTypeName>Specimen</entityTypeName>
            <singleton>
                <name>Patient</name>
            </singleton>
        </entityType>
    </uiField>

    <!-- Artifical MDR field / with two singletons 'Patient' & 'Observation' -->
    <uiField>
        <mdrUrn>urn:mdr16:dataelement:08:17</mdrUrn>
        <codesystem/>
        <entityType>
            <entityTypeName>Patient</entityTypeName>
        </entityType>
        <entityType>
            <entityTypeName>Specimen</entityTypeName>
            <singleton>
                <name>Patient</name>
            </singleton>
            <singleton>
                <name>Observation</name>
            </singleton>
        </entityType>
    </uiField>

    <!-- Artifical MDR field / with two singletons 'Patient' & 'Patient' -->
    <uiField>
        <mdrUrn>urn:mdr16:dataelement:08:18</mdrUrn>
        <codesystem/>
        <entityType>
            <entityTypeName>Patient</entityTypeName>
        </entityType>
        <entityType>
            <entityTypeName>Specimen</entityTypeName>
            <singleton>
                <name>Patient</name>
            </singleton>
            <singleton>
                <name>Patient</name>
            </singleton>
        </entityType>
    </uiField>

    <!-- Artifical MDR field / with two permitted values for the same mdr key -->
    <uiField>
        <mdrUrn>urn:mdr16:dataelement:08:19</mdrUrn>
        <codesystem/>
        <permittedValue>
            <mdrKey>SMOKER</mdrKey>
            <cqlValue>SMOKER_1</cqlValue>
        </permittedValue>
        <permittedValue>
            <mdrKey>SMOKER</mdrKey>
            <cqlValue>SMOKER_2</cqlValue>
        </permittedValue>
        <entityType>
            <entityTypeName>Patient</entityTypeName>
        </entityType>
        <entityType>
            <entityTypeName>Specimen</entityTypeName>
        </entityType>
    </uiField>

</cqlConfig>